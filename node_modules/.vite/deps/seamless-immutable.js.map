{
  "version": 3,
  "sources": ["../../seamless-immutable/seamless-immutable.development.js"],
  "sourcesContent": ["(function() {\n  \"use strict\";\n\nfunction immutableInit(config) {\n\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n\n  var globalConfig = {\n    use_static: false\n  };\n  if (isObject(config)) {\n      if (config.use_static !== undefined) {\n          globalConfig.use_static = Boolean(config.use_static);\n      }\n  }\n\n  function isObject(data) {\n    return (\n      typeof data === 'object' &&\n      !Array.isArray(data) &&\n      data !== null\n    );\n  }\n\n  function instantiateEmptyObject(obj) {\n      var prototype = Object.getPrototypeOf(obj);\n      if (!prototype) {\n          return {};\n      } else {\n          return Object.create(prototype);\n      }\n  }\n\n  function addPropertyTo(target, methodName, value) {\n    Object.defineProperty(target, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    });\n  }\n\n  function banProperty(target, methodName) {\n    addPropertyTo(target, methodName, function() {\n      throw new ImmutableError(\"The \" + methodName +\n        \" method cannot be invoked on an Immutable data structure.\");\n    });\n  }\n\n  var immutabilityTag = \"__immutable_invariants_hold\";\n\n  function addImmutabilityTag(target) {\n    addPropertyTo(target, immutabilityTag, true);\n  }\n\n  function isImmutable(target) {\n    if (typeof target === \"object\") {\n      return target === null || Boolean(\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\n      );\n    } else {\n      // In JavaScript, only objects are even potentially mutable.\n      // strings, numbers, null, and undefined are all naturally immutable.\n      return true;\n    }\n  }\n\n  function isEqual(a, b) {\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\n    return (a === b || (a !== a && b !== b));\n  }\n\n  function isMergableObject(target) {\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\n  }\n\n  var mutatingObjectMethods = [\n    \"setPrototypeOf\"\n  ];\n\n  var nonMutatingObjectMethods = [\n    \"keys\"\n  ];\n\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\n  ]);\n\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\n  ]);\n\n  var mutatingDateMethods = mutatingObjectMethods.concat([\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\n  ]);\n\n  function ImmutableError(message) {\n    this.name = 'MyError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n  }\n  ImmutableError.prototype = new Error();\n  ImmutableError.prototype.constructor = Error;\n\n  function makeImmutable(obj, bannedMethods) {\n    // Tag it so we can quickly tell it's immutable later.\n    addImmutabilityTag(obj);\n\n    if (\"development\" !== \"production\") {\n      // Make all mutating methods throw exceptions.\n      for (var index in bannedMethods) {\n        if (bannedMethods.hasOwnProperty(index)) {\n          banProperty(obj, bannedMethods[index]);\n        }\n      }\n\n      // Freeze it and return it.\n      Object.freeze(obj);\n    }\n\n    return obj;\n  }\n\n  function makeMethodReturnImmutable(obj, methodName) {\n    var currentMethod = obj[methodName];\n\n    addPropertyTo(obj, methodName, function() {\n      return Immutable(currentMethod.apply(obj, arguments));\n    });\n  }\n\n  function arraySet(idx, value, config) {\n    var deep          = config && config.deep;\n\n    if (idx in this) {\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n        value = Immutable.merge(this[idx], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[idx], value)) {\n        return this;\n      }\n    }\n\n    var mutable = asMutableArray.call(this);\n    mutable[idx] = Immutable(value);\n    return makeImmutableArray(mutable);\n  }\n\n  var immutableEmptyArray = Immutable([]);\n\n  function arraySetIn(pth, value, config) {\n    var head = pth[0];\n\n    if (pth.length === 1) {\n      return arraySet.call(this, head, value, config);\n    } else {\n      var tail = pth.slice(1);\n      var thisHead = this[head];\n      var newValue;\n\n      if (typeof(thisHead) === \"object\" && thisHead !== null) {\n        // Might (validly) be object or array\n        newValue = Immutable.setIn(thisHead, tail, value);\n      } else {\n        var nextHead = tail[0];\n        // If the next path part is a number, then we are setting into an array, else an object.\n        if (nextHead !== '' && isFinite(nextHead)) {\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n        } else {\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n        }\n      }\n\n      if (head in this && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[head] = newValue;\n      return makeImmutableArray(mutable);\n    }\n  }\n\n  function makeImmutableArray(array) {\n    // Don't change their implementations, but wrap these functions to make sure\n    // they always return an immutable value.\n    for (var index in nonMutatingArrayMethods) {\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n        var methodName = nonMutatingArrayMethods[index];\n        makeMethodReturnImmutable(array, methodName);\n      }\n    }\n\n    if (!globalConfig.use_static) {\n      addPropertyTo(array, \"flatMap\",  flatMap);\n      addPropertyTo(array, \"asObject\", asObject);\n      addPropertyTo(array, \"asMutable\", asMutableArray);\n      addPropertyTo(array, \"set\", arraySet);\n      addPropertyTo(array, \"setIn\", arraySetIn);\n      addPropertyTo(array, \"update\", update);\n      addPropertyTo(array, \"updateIn\", updateIn);\n      addPropertyTo(array, \"getIn\", getIn);\n    }\n\n    for(var i = 0, length = array.length; i < length; i++) {\n      array[i] = Immutable(array[i]);\n    }\n\n    return makeImmutable(array, mutatingArrayMethods);\n  }\n\n  function makeImmutableDate(date) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(date, \"asMutable\", asMutableDate);\n    }\n\n    return makeImmutable(date, mutatingDateMethods);\n  }\n\n  function asMutableDate() {\n    return new Date(this.getTime());\n  }\n\n  /**\n   * Effectively performs a map() over the elements in the array, using the\n   * provided iterator, except that whenever the iterator returns an array, that\n   * array's elements are added to the final result instead of the array itself.\n   *\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n   */\n  function flatMap(iterator) {\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    var result = [],\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var iteratorResult = iterator(this[index], index, this);\n\n      if (Array.isArray(iteratorResult)) {\n        // Concatenate Array results into the return value we're building up.\n        result.push.apply(result, iteratorResult);\n      } else {\n        // Handle non-Array results the same way map() does.\n        result.push(iteratorResult);\n      }\n    }\n\n    return makeImmutableArray(result);\n  }\n\n  /**\n   * Returns an Immutable copy of the object without the given keys included.\n   *\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n   */\n  function without(remove) {\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\n      return this;\n    }\n\n    if (typeof remove !== \"function\") {\n      // If we weren't given an array, use the arguments list.\n      var keysToRemoveArray = (Array.isArray(remove)) ?\n         remove.slice() : Array.prototype.slice.call(arguments);\n\n      // Convert numeric keys to strings since that's how they'll\n      // come from the enumeration of the object.\n      keysToRemoveArray.forEach(function(el, idx, arr) {\n        if(typeof(el) === \"number\") {\n          arr[idx] = el.toString();\n        }\n      });\n\n      remove = function(val, key) {\n        return keysToRemoveArray.indexOf(key) !== -1;\n      };\n    }\n\n    var result = instantiateEmptyObject(this);\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n        result[key] = this[key];\n      }\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asMutableArray(opts) {\n    var result = [], i, length;\n\n    if(opts && opts.deep) {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(asDeepMutable(this[i]));\n      }\n    } else {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(this[i]);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n   * will return an array of two elements - the first representing a key, the other\n   * a value. Then returns an Immutable Object constructed of those keys and values.\n   *\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n   */\n  function asObject(iterator) {\n    // If no iterator was provided, assume the identity function\n    // (suggesting this array is already a list of key/value pairs.)\n    if (typeof iterator !== \"function\") {\n      iterator = function(value) { return value; };\n    }\n\n    var result = {},\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var pair  = iterator(this[index], index, this),\n          key   = pair[0],\n          value = pair[1];\n\n      result[key] = value;\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asDeepMutable(obj) {\n    if (\n      (!obj) ||\n      (typeof obj !== 'object') ||\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\n      (obj instanceof Date)\n    ) { return obj; }\n    return Immutable.asMutable(obj, {deep: true});\n  }\n\n  function quickCopy(src, dest) {\n    for (var key in src) {\n      if (Object.getOwnPropertyDescriptor(src, key)) {\n        dest[key] = src[key];\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns an Immutable Object containing the properties and values of both\n   * this object and the provided object, prioritizing the provided object's\n   * values whenever the same key is present in both objects.\n   *\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n   */\n  function merge(other, config) {\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (other === null || (typeof other !== \"object\")) {\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n    }\n\n    var receivedArray = (Array.isArray(other)),\n        deep          = config && config.deep,\n        mode          = config && config.mode || 'merge',\n        merger        = config && config.merger,\n        result;\n\n    // Use the given key to extract a value from the given object, then place\n    // that value in the result object under the same key. If that resulted\n    // in a change from this object's value at that key, set anyChanges = true.\n    function addToResult(currentObj, otherObj, key) {\n      var immutableValue = Immutable(otherObj[key]);\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n      var currentValue = currentObj[key];\n\n      if ((result !== undefined) ||\n        (mergerResult !== undefined) ||\n        (!currentObj.hasOwnProperty(key)) ||\n        !isEqual(immutableValue, currentValue)) {\n\n        var newValue;\n\n        if (mergerResult !== undefined) {\n          newValue = mergerResult;\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n          newValue = Immutable.merge(currentValue, immutableValue, config);\n        } else {\n          newValue = immutableValue;\n        }\n\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n\n          result[key] = newValue;\n        }\n      }\n    }\n\n    function clearDroppedKeys(currentObj, otherObj) {\n      for (var key in currentObj) {\n        if (!otherObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, instantiateEmptyObject(currentObj));\n          }\n          delete result[key];\n        }\n      }\n    }\n\n    var key;\n\n    // Achieve prioritization by overriding previous values that get in the way.\n    if (!receivedArray) {\n      // The most common use case: just merge one object into the existing one.\n      for (key in other) {\n        if (Object.getOwnPropertyDescriptor(other, key)) {\n          addToResult(this, other, key);\n        }\n      }\n      if (mode === 'replace') {\n        clearDroppedKeys(this, other);\n      }\n    } else {\n      // We also accept an Array\n      for (var index = 0, length = other.length; index < length; index++) {\n        var otherFromArray = other[index];\n\n        for (key in otherFromArray) {\n          if (otherFromArray.hasOwnProperty(key)) {\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\n          }\n        }\n      }\n    }\n\n    if (result === undefined) {\n      return this;\n    } else {\n      return makeImmutableObject(result);\n    }\n  }\n\n  function objectReplace(value, config) {\n    var deep          = config && config.deep;\n\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (value === null || typeof value !== \"object\") {\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n    }\n\n    return Immutable.merge(this, value, {deep: deep, mode: 'replace'});\n  }\n\n  var immutableEmptyObject = Immutable({});\n\n  function objectSetIn(path, value, config) {\n    if (!(Array.isArray(path)) || path.length === 0) {\n      throw new TypeError(\"The first argument to Immutable#setIn must be an array containing at least one \\\"key\\\" string.\");\n    }\n\n    var head = path[0];\n    if (path.length === 1) {\n      return objectSet.call(this, head, value, config);\n    }\n\n    var tail = path.slice(1);\n    var newValue;\n    var thisHead = this[head];\n\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null) {\n      // Might (validly) be object or array\n      newValue = Immutable.setIn(thisHead, tail, value);\n    } else {\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n    }\n\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\n      return this;\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[head] = newValue;\n    return makeImmutableObject(mutable);\n  }\n\n  function objectSet(property, value, config) {\n    var deep          = config && config.deep;\n\n    if (this.hasOwnProperty(property)) {\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n        value = Immutable.merge(this[property], value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[property], value)) {\n        return this;\n      }\n    }\n\n    var mutable = quickCopy(this, instantiateEmptyObject(this));\n    mutable[property] = Immutable(value);\n    return makeImmutableObject(mutable);\n  }\n\n  function update(property, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = this[property];\n    return Immutable.set(this, property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getInPath(obj, path) {\n    /*jshint eqnull:true */\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\n      obj = obj[path[i]];\n    }\n\n    return (i && i == l) ? obj : undefined;\n  }\n\n  function updateIn(path, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = getInPath(this, path);\n\n    return Immutable.setIn(this, path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getIn(path, defaultValue) {\n    var value = getInPath(this, path);\n    return value === undefined ? defaultValue : value;\n  }\n\n  function asMutableObject(opts) {\n    var result = instantiateEmptyObject(this), key;\n\n    if(opts && opts.deep) {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = asDeepMutable(this[key]);\n        }\n      }\n    } else {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = this[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Creates plain object to be used for cloning\n  function instantiatePlainObject() {\n    return {};\n  }\n\n  // Finalizes an object with immutable methods, freezes it, and returns it.\n  function makeImmutableObject(obj) {\n    if (!globalConfig.use_static) {\n      addPropertyTo(obj, \"merge\", merge);\n      addPropertyTo(obj, \"replace\", objectReplace);\n      addPropertyTo(obj, \"without\", without);\n      addPropertyTo(obj, \"asMutable\", asMutableObject);\n      addPropertyTo(obj, \"set\", objectSet);\n      addPropertyTo(obj, \"setIn\", objectSetIn);\n      addPropertyTo(obj, \"update\", update);\n      addPropertyTo(obj, \"updateIn\", updateIn);\n      addPropertyTo(obj, \"getIn\", getIn);\n    }\n\n    return makeImmutable(obj, mutatingObjectMethods);\n  }\n\n  // Returns true if object is a valid react element\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n  function isReactElement(obj) {\n    return typeof obj === 'object' &&\n           obj !== null &&\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n  }\n\n  function isFileObject(obj) {\n    return typeof File !== 'undefined' &&\n           obj instanceof File;\n  }\n\n  function isBlobObject(obj) {\n    return typeof Blob !== 'undefined' &&\n           obj instanceof Blob;\n  }\n\n  function isPromise(obj) {\n    return typeof obj === 'object' &&\n           typeof obj.then === 'function';\n  }\n\n  function isError(obj) {\n    return obj instanceof Error;\n  }\n\n  function Immutable(obj, options, stackRemaining) {\n    if (isImmutable(obj) || isReactElement(obj) || isFileObject(obj) || isBlobObject(obj) || isError(obj)) {\n      return obj;\n    } else if (isPromise(obj)) {\n      return obj.then(Immutable);\n    } else if (Array.isArray(obj)) {\n      return makeImmutableArray(obj.slice());\n    } else if (obj instanceof Date) {\n      return makeImmutableDate(new Date(obj.getTime()));\n    } else {\n      // Don't freeze the object we were given; make a clone and use that.\n      var prototype = options && options.prototype;\n      var instantiateEmptyObject =\n        (!prototype || prototype === Object.prototype) ?\n          instantiatePlainObject : (function() { return Object.create(prototype); });\n      var clone = instantiateEmptyObject();\n\n      if (\"development\" !== \"production\") {\n        /*jshint eqnull:true */\n        if (stackRemaining == null) {\n          stackRemaining = 64;\n        }\n        if (stackRemaining <= 0) {\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n        }\n        stackRemaining -= 1;\n      }\n\n      for (var key in obj) {\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\n        }\n      }\n\n      return makeImmutableObject(clone);\n    }\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object.\n  function toStaticObjectOrArray(fnObject, fnArray) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object or a date.\n  function toStaticObjectOrDateOrArray(fnObject, fnArray, fnDate) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else if (self instanceof Date) {\n          return fnDate.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Export the library\n  Immutable.from           = Immutable;\n  Immutable.isImmutable    = isImmutable;\n  Immutable.ImmutableError = ImmutableError;\n  Immutable.merge          = toStatic(merge);\n  Immutable.replace        = toStatic(objectReplace);\n  Immutable.without        = toStatic(without);\n  Immutable.asMutable      = toStaticObjectOrDateOrArray(asMutableObject, asMutableArray, asMutableDate);\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\n  Immutable.update         = toStatic(update);\n  Immutable.updateIn       = toStatic(updateIn);\n  Immutable.getIn          = toStatic(getIn);\n  Immutable.flatMap        = toStatic(flatMap);\n  Immutable.asObject       = toStatic(asObject);\n  if (!globalConfig.use_static) {\n      Immutable.static = immutableInit({\n          use_static: true\n      });\n  }\n\n  Object.freeze(Immutable);\n\n  return Immutable;\n}\n\n  var Immutable = immutableInit();\n  /* istanbul ignore if */\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return Immutable;\n    });\n  } else if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();\n"],
  "mappings": "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",
  "names": ["Immutable", "config", "key", "value", "instantiateEmptyObject"]
}
